name: workflow recette pipeline

on:
  push:
    branches:
      - recette
  pull_request:
    branches:
      - recette

jobs:
  Get-settings: 
    runs-on: macos-latest
    steps:
         - name: French settings
           run: |
            curl --output app/src/main/res/values-fr/strings.xml -H "Authorization: Loco ${{ env.LOCOTOKEN }}" https://localise.biz/api/export/locale/fr_FR.xml?charset=UTF-8&format=xml

         - name: English settings
           run: |
            curl --output app/src/main/res/values/strings.xml -H "Authorization: Loco $(LOCOTOKEN)" https://localise.biz/api/export/locale/en_EN.xml?charset=UTF-8&format=xml

         - name: German settings
           run: |
            curl --output app/src/main/res/values-de/strings.xml -H "Authorization: Loco $(LOCOTOKEN)" https://localise.biz/api/export/locale/de_DE.xml?charset=UTF-8&format=xml

         - name: Dutch settings
           run: |
            curl --output app/src/main/res/values-nl/strings.xml -H "Authorization: Loco $(LOCOTOKEN)" https://localise.biz/api/export/locale/nl.xml?charset=UTF-8&format=xml
  
  Setup-and-build-app:
    needs: Get-settings
    runs-on: macos-lastest
    steps:
         - uses: actions/checkout@v3
         - uses: actions/setup-java@v3
           name: Setup Java 17
           with:
            java-version: '17'
            run: ./gradlew assembleRecette
            
         - uses: actions/checkout@v3
         - uses: derberg/manage-files-in-multiple-repositories@v2
           with:
            github_token: ${{ secrets.CUSTOM_TOKEN }} # à prévoir
            #you must specify what pattern to include otherwise all files from the repository will be replicated 
            patterns_to_include: "**/?(app-recette.apk)" # A voir ce que c'est réellement 
            
  Generate-keys: 
    runs-on: macos-latest
    steps:
         - name: Generate Sha1
           run: |
            keytool -list -v -keystore $(Agent.TempDirectory)/appholderStore.keystore -alias alias_name -storepass $(keyPassword) | grep SHA1 | awk '{print $2}' >> $(build.artifactStagingDirectory)/sha1.txt

         - name: Echo Generate Sha1
           run: |
            keytool -list -v -keystore $(Agent.TempDirectory)/appholderStore.keystore -alias alias_name -storepass $(keyPassword)
            
  Publishing:
    needs: [Get-settings, Setup-and-build-app, Generate-keys]
    runs-on: macos-lastest
    steps:
         - name: upload artifact to Firebase App Distribution
           uses: wzieba/Firebase-Distribution-Github-Action@v1
           with:
            appId: ${{secrets.FIREBASE_APP_ID}} # a voir waykonect-appporteur-internal
            serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }} # Important !
            debug: true
            file: app/build/outputs/apk/release/app-release-unsigned.apk # Remplir avec l'APK
               
            
       
